using System;
using System.Numerics;
using System.Diagnostics;
using System.Collections.Generic;
using System.Collections.Specialized;

namespace Tools
{
    // https://habr.com/ru/articles/745820/
    class RSA
    {
        private const int BIT_LENGTH = 1024 * 8;
        private const int BYTE_LENGTH = BIT_LENGTH / 8;
        private const int TEST_SAMPLES = 10;
        public static readonly List<BigInteger> PRIMES = new List<BigInteger>
        {
            BigInteger.Parse("700659603263148726043253647098324000725292315931957621419637799747993372461352633512643757592917663041832710355100422470528397188909262164976072279278984478784712817158805505596158807905724585389892419802064494610865086337104041912542345810463584923013825961445830887942262674997055922770181868050834801755502711568967948864570394304087812144589276166143562220131736466242652216233480779931722540058370876286196191871181353130327878609314947949931327675395801509871030344623397309268916670720216769731649929974739678966992509359870770118987105461804825586142065631439724359976798430831878074648377433907881732540266946119644657912516044098757262897952401278724411065490550872427911405514547958347984791015251619049084149028683036623726572282588668549564805107156230606931813396740993700928536501891914527794973567682293777541956022836141464327567331350220338229692663522062803252540537158233345408240209594751183717799599025038112202132735423912541536853009341155687394094143914006309836761550404246816382172789542963086900388177952084358087964233816324489044464017421974837751944807300709791132477804366033839545985556671709913564955446603735207407269185815450708349433176090738616295881361286939832454699152479276043197619223108873208876978523774723503018250393374689600852699536288858533281017025880257690863328796473021140682449349309106984236166579917362459578607810362040497321211999035152257172522365314951567701574347460126627684227430422542396962782590517729287825773885664395590765196272726990756771663285296007987979441560751351278623926210702022423996483451063436830170882399827680163107866923979466976939301044596577608012621141104394468631482657109817254881357795962231429243426309471862610357083657308795382696902496579218566512071541007015121597454958488097013387021406075404611676784746227541743576440486117044792291672288544314261769522247109624136614269293587425860416979317833297940353729257843230363277970277371151383121763121885681217160479210407646265113633486772894546176746847309158704383755965935000023612496748662753313153750594764588637148195513527972913230559377075030335812036995201141182589258434332791928340053930939299921839308515791624902911793675590884798865074315014618523587221872497810349142470372583346492008610082949614978609726687683472356367034561545424261411392087801689643667069476382729924033898738100030104575536102459653668251103615421214948583385636645313139831081950846125342732097475658967139865551095257064599945537"),
            BigInteger.Parse("700659603263148726043253647098324000725292315931957621419637799747993372461352633512643757592917663041832710355100422470528397188909262164976072279278984478784712817158805505596158807905724585389892419802064494610865086337104041912542345810463584923013825961445830887942262674997055922770181868050834801755502711568967948864570394304087812144589276166143562220131736466242652216233480779931722540058370876286196191871181353130327878609314947949931327675395801509871030344623397309268916670720216769731649929974739678966992509359870770118987105461804825586142065631439724359976798430831878074648377433907881732540266946119644657912516044098757262897952401278724411065490550872427911405514547958347984791015251619049084149028683036623726572282588668549564805107156230606931813396740993700928536501891914527794973567682293777541956022836141464327567331350220338229692663522062803252540537158233345408240209594751183717799599025038112202132735423912541536853009341155687394094143914006309836761550404246816382172789542963086900388177952084358087964233816324489044464017421974837751944807300709791132477804366033839545985556671709913564955446603735207407269185815450708349433176090738616295881361286939832454699152479276043197619223108873208876978523774723503018250393374689600852699536288858533281017025880257690863328796473021140682449349309106984236166579917362459578607810362040497321211999035152257172522365314951567701574347460126627684227430422542396962782590517729287825773885664395590765196272726990756771663285296007987979441560751351278623926210702022423996483451063436830170882399827680163107866923979466976939301044596577608012621141104394468631482657109817254881357795962231429243426309471862610357083657308795382696902496579218566512071541007015121597454958488097013387021406075404611676784746227541743576440486117044792291672288544314261769522247109624136614269293587425860416979317833297940353729257843230363277970277371151383121763121885681217160479210407646265113633486772894546176746847309158704383755965935000023612496748662753313153750594764588637148195513527972913230559377075030335812036995201141182589258434332791928340053930939299921839308515791624902911793675590884798865074315014618523587221872497810349142470372583346492008610082949614978609726687683472356367034561545424261411392087801689643667069476382729924033898738100030104575536102459653668251103615421214948583385636645313139831081950846125342732097475658967139865551095257064599948609"),
            BigInteger.Parse("700659603263148726043253647098324000725292315931957621419637799747993372461352633512643757592917663041832710355100422470528397188909262164976072279278984478784712817158805505596158807905724585389892419802064494610865086337104041912542345810463584923013825961445830887942262674997055922770181868050834801755502711568967948864570394304087812144589276166143562220131736466242652216233480779931722540058370876286196191871181353130327878609314947949931327675395801509871030344623397309268916670720216769731649929974739678966992509359870770118987105461804825586142065631439724359976798430831878074648377433907881732540266946119644657912516044098757262897952401278724411065490550872427911405514547958347984791015251619049084149028683036623726572282588668549564805107156230606931813396740993700928536501891914527794973567682293777541956022836141464327567331350220338229692663522062803252540537158233345408240209594751183717799599025038112202132735423912541536853009341155687394094143914006309836761550404246816382172789542963086900388177952084358087964233816324489044464017421974837751944807300709791132477804366033839545985556671709913564955446603735207407269185815450708349433176090738616295881361286939832454699152479276043197619223108873208876978523774723503018250393374689600852699536288858533281017025880257690863328796473021140682449349309106984236166579917362459578607810362040497321211999035152257172522365314951567701574347460126627684227430422542396962782590517729287825773885664395590765196272726990756771663285296007987979441560751351278623926210702022423996483451063436830170882399827680163107866923979466976939301044596577608012621141104394468631482657109817254881357795962231429243426309471862610357083657308795382696902496579218566512071541007015121597454958488097013387021406075404611676784746227541743576440486117044792291672288544314261769522247109624136614269293587425860416979317833297940353729257843230363277970277371151383121763121885681217160479210407646265113633486772894546176746847309158704383755965935000023612496748662753313153750594764588637148195513527972913230559377075030335812036995201141182589258434332791928340053930939299921839308515791624902911793675590884798865074315014618523587221872497810349142470372583346492008610082949614978609726687683472356367034561545424261411392087801689643667069476382729924033898738100030104575536102459653668251103615421214948583385636645313139831081950846125342732097475658967139865551095257064599949491"),
            BigInteger.Parse("700659603263148726043253647098324000725292315931957621419637799747993372461352633512643757592917663041832710355100422470528397188909262164976072279278984478784712817158805505596158807905724585389892419802064494610865086337104041912542345810463584923013825961445830887942262674997055922770181868050834801755502711568967948864570394304087812144589276166143562220131736466242652216233480779931722540058370876286196191871181353130327878609314947949931327675395801509871030344623397309268916670720216769731649929974739678966992509359870770118987105461804825586142065631439724359976798430831878074648377433907881732540266946119644657912516044098757262897952401278724411065490550872427911405514547958347984791015251619049084149028683036623726572282588668549564805107156230606931813396740993700928536501891914527794973567682293777541956022836141464327567331350220338229692663522062803252540537158233345408240209594751183717799599025038112202132735423912541536853009341155687394094143914006309836761550404246816382172789542963086900388177952084358087964233816324489044464017421974837751944807300709791132477804366033839545985556671709913564955446603735207407269185815450708349433176090738616295881361286939832454699152479276043197619223108873208876978523774723503018250393374689600852699536288858533281017025880257690863328796473021140682449349309106984236166579917362459578607810362040497321211999035152257172522365314951567701574347460126627684227430422542396962782590517729287825773885664395590765196272726990756771663285296007987979441560751351278623926210702022423996483451063436830170882399827680163107866923979466976939301044596577608012621141104394468631482657109817254881357795962231429243426309471862610357083657308795382696902496579218566512071541007015121597454958488097013387021406075404611676784746227541743576440486117044792291672288544314261769522247109624136614269293587425860416979317833297940353729257843230363277970277371151383121763121885681217160479210407646265113633486772894546176746847309158704383755965935000023612496748662753313153750594764588637148195513527972913230559377075030335812036995201141182589258434332791928340053930939299921839308515791624902911793675590884798865074315014618523587221872497810349142470372583346492008610082949614978609726687683472356367034561545424261411392087801689643667069476382729924033898738100030104575536102459653668251103615421214948583385636645313139831081950846125342732097475658967139865551095257064599954647"),
            BigInteger.Parse("700659603263148726043253647098324000725292315931957621419637799747993372461352633512643757592917663041832710355100422470528397188909262164976072279278984478784712817158805505596158807905724585389892419802064494610865086337104041912542345810463584923013825961445830887942262674997055922770181868050834801755502711568967948864570394304087812144589276166143562220131736466242652216233480779931722540058370876286196191871181353130327878609314947949931327675395801509871030344623397309268916670720216769731649929974739678966992509359870770118987105461804825586142065631439724359976798430831878074648377433907881732540266946119644657912516044098757262897952401278724411065490550872427911405514547958347984791015251619049084149028683036623726572282588668549564805107156230606931813396740993700928536501891914527794973567682293777541956022836141464327567331350220338229692663522062803252540537158233345408240209594751183717799599025038112202132735423912541536853009341155687394094143914006309836761550404246816382172789542963086900388177952084358087964233816324489044464017421974837751944807300709791132477804366033839545985556671709913564955446603735207407269185815450708349433176090738616295881361286939832454699152479276043197619223108873208876978523774723503018250393374689600852699536288858533281017025880257690863328796473021140682449349309106984236166579917362459578607810362040497321211999035152257172522365314951567701574347460126627684227430422542396962782590517729287825773885664395590765196272726990756771663285296007987979441560751351278623926210702022423996483451063436830170882399827680163107866923979466976939301044596577608012621141104394468631482657109817254881357795962231429243426309471862610357083657308795382696902496579218566512071541007015121597454958488097013387021406075404611676784746227541743576440486117044792291672288544314261769522247109624136614269293587425860416979317833297940353729257843230363277970277371151383121763121885681217160479210407646265113633486772894546176746847309158704383755965935000023612496748662753313153750594764588637148195513527972913230559377075030335812036995201141182589258434332791928340053930939299921839308515791624902911793675590884798865074315014618523587221872497810349142470372583346492008610082949614978609726687683472356367034561545424261411392087801689643667069476382729924033898738100030104575536102459653668251103615421214948583385636645313139831081950846125342732097475658967139865551095257064599945537"),
            BigInteger.Parse("700659603263148726043253647098324000725292315931957621419637799747993372461352633512643757592917663041832710355100422470528397188909262164976072279278984478784712817158805505596158807905724585389892419802064494610865086337104041912542345810463584923013825961445830887942262674997055922770181868050834801755502711568967948864570394304087812144589276166143562220131736466242652216233480779931722540058370876286196191871181353130327878609314947949931327675395801509871030344623397309268916670720216769731649929974739678966992509359870770118987105461804825586142065631439724359976798430831878074648377433907881732540266946119644657912516044098757262897952401278724411065490550872427911405514547958347984791015251619049084149028683036623726572282588668549564805107156230606931813396740993700928536501891914527794973567682293777541956022836141464327567331350220338229692663522062803252540537158233345408240209594751183717799599025038112202132735423912541536853009341155687394094143914006309836761550404246816382172789542963086900388177952084358087964233816324489044464017421974837751944807300709791132477804366033839545985556671709913564955446603735207407269185815450708349433176090738616295881361286939832454699152479276043197619223108873208876978523774723503018250393374689600852699536288858533281017025880257690863328796473021140682449349309106984236166579917362459578607810362040497321211999035152257172522365314951567701574347460126627684227430422542396962782590517729287825773885664395590765196272726990756771663285296007987979441560751351278623926210702022423996483451063436830170882399827680163107866923979466976939301044596577608012621141104394468631482657109817254881357795962231429243426309471862610357083657308795382696902496579218566512071541007015121597454958488097013387021406075404611676784746227541743576440486117044792291672288544314261769522247109624136614269293587425860416979317833297940353729257843230363277970277371151383121763121885681217160479210407646265113633486772894546176746847309158704383755965935000023612496748662753313153750594764588637148195513527972913230559377075030335812036995201141182589258434332791928340053930939299921839308515791624902911793675590884798865074315014618523587221872497810349142470372583346492008610082949614978609726687683472356367034561545424261411392087801689643667069476382729924033898738100030104575536102459653668251103615421214948583385636645313139831081950846125342732097475658967139865551095257064599970737"),
            BigInteger.Parse("700659603263148726043253647098324000725292315931957621419637799747993372461352633512643757592917663041832710355100422470528397188909262164976072279278984478784712817158805505596158807905724585389892419802064494610865086337104041912542345810463584923013825961445830887942262674997055922770181868050834801755502711568967948864570394304087812144589276166143562220131736466242652216233480779931722540058370876286196191871181353130327878609314947949931327675395801509871030344623397309268916670720216769731649929974739678966992509359870770118987105461804825586142065631439724359976798430831878074648377433907881732540266946119644657912516044098757262897952401278724411065490550872427911405514547958347984791015251619049084149028683036623726572282588668549564805107156230606931813396740993700928536501891914527794973567682293777541956022836141464327567331350220338229692663522062803252540537158233345408240209594751183717799599025038112202132735423912541536853009341155687394094143914006309836761550404246816382172789542963086900388177952084358087964233816324489044464017421974837751944807300709791132477804366033839545985556671709913564955446603735207407269185815450708349433176090738616295881361286939832454699152479276043197619223108873208876978523774723503018250393374689600852699536288858533281017025880257690863328796473021140682449349309106984236166579917362459578607810362040497321211999035152257172522365314951567701574347460126627684227430422542396962782590517729287825773885664395590765196272726990756771663285296007987979441560751351278623926210702022423996483451063436830170882399827680163107866923979466976939301044596577608012621141104394468631482657109817254881357795962231429243426309471862610357083657308795382696902496579218566512071541007015121597454958488097013387021406075404611676784746227541743576440486117044792291672288544314261769522247109624136614269293587425860416979317833297940353729257843230363277970277371151383121763121885681217160479210407646265113633486772894546176746847309158704383755965935000023612496748662753313153750594764588637148195513527972913230559377075030335812036995201141182589258434332791928340053930939299921839308515791624902911793675590884798865074315014618523587221872497810349142470372583346492008610082949614978609726687683472356367034561545424261411392087801689643667069476382729924033898738100030104575536102459653668251103615421214948583385636645313139831081950846125342732097475658967139865551095257064599968157"),
            BigInteger.Parse("700659603263148726043253647098324000725292315931957621419637799747993372461352633512643757592917663041832710355100422470528397188909262164976072279278984478784712817158805505596158807905724585389892419802064494610865086337104041912542345810463584923013825961445830887942262674997055922770181868050834801755502711568967948864570394304087812144589276166143562220131736466242652216233480779931722540058370876286196191871181353130327878609314947949931327675395801509871030344623397309268916670720216769731649929974739678966992509359870770118987105461804825586142065631439724359976798430831878074648377433907881732540266946119644657912516044098757262897952401278724411065490550872427911405514547958347984791015251619049084149028683036623726572282588668549564805107156230606931813396740993700928536501891914527794973567682293777541956022836141464327567331350220338229692663522062803252540537158233345408240209594751183717799599025038112202132735423912541536853009341155687394094143914006309836761550404246816382172789542963086900388177952084358087964233816324489044464017421974837751944807300709791132477804366033839545985556671709913564955446603735207407269185815450708349433176090738616295881361286939832454699152479276043197619223108873208876978523774723503018250393374689600852699536288858533281017025880257690863328796473021140682449349309106984236166579917362459578607810362040497321211999035152257172522365314951567701574347460126627684227430422542396962782590517729287825773885664395590765196272726990756771663285296007987979441560751351278623926210702022423996483451063436830170882399827680163107866923979466976939301044596577608012621141104394468631482657109817254881357795962231429243426309471862610357083657308795382696902496579218566512071541007015121597454958488097013387021406075404611676784746227541743576440486117044792291672288544314261769522247109624136614269293587425860416979317833297940353729257843230363277970277371151383121763121885681217160479210407646265113633486772894546176746847309158704383755965935000023612496748662753313153750594764588637148195513527972913230559377075030335812036995201141182589258434332791928340053930939299921839308515791624902911793675590884798865074315014618523587221872497810349142470372583346492008610082949614978609726687683472356367034561545424261411392087801689643667069476382729924033898738100030104575536102459653668251103615421214948583385636645313139831081950846125342732097475658967139865551095257064599965417"),
            BigInteger.Parse("700659603263148726043253647098324000725292315931957621419637799747993372461352633512643757592917663041832710355100422470528397188909262164976072279278984478784712817158805505596158807905724585389892419802064494610865086337104041912542345810463584923013825961445830887942262674997055922770181868050834801755502711568967948864570394304087812144589276166143562220131736466242652216233480779931722540058370876286196191871181353130327878609314947949931327675395801509871030344623397309268916670720216769731649929974739678966992509359870770118987105461804825586142065631439724359976798430831878074648377433907881732540266946119644657912516044098757262897952401278724411065490550872427911405514547958347984791015251619049084149028683036623726572282588668549564805107156230606931813396740993700928536501891914527794973567682293777541956022836141464327567331350220338229692663522062803252540537158233345408240209594751183717799599025038112202132735423912541536853009341155687394094143914006309836761550404246816382172789542963086900388177952084358087964233816324489044464017421974837751944807300709791132477804366033839545985556671709913564955446603735207407269185815450708349433176090738616295881361286939832454699152479276043197619223108873208876978523774723503018250393374689600852699536288858533281017025880257690863328796473021140682449349309106984236166579917362459578607810362040497321211999035152257172522365314951567701574347460126627684227430422542396962782590517729287825773885664395590765196272726990756771663285296007987979441560751351278623926210702022423996483451063436830170882399827680163107866923979466976939301044596577608012621141104394468631482657109817254881357795962231429243426309471862610357083657308795382696902496579218566512071541007015121597454958488097013387021406075404611676784746227541743576440486117044792291672288544314261769522247109624136614269293587425860416979317833297940353729257843230363277970277371151383121763121885681217160479210407646265113633486772894546176746847309158704383755965935000023612496748662753313153750594764588637148195513527972913230559377075030335812036995201141182589258434332791928340053930939299921839308515791624902911793675590884798865074315014618523587221872497810349142470372583346492008610082949614978609726687683472356367034561545424261411392087801689643667069476382729924033898738100030104575536102459653668251103615421214948583385636645313139831081950846125342732097475658967139865551095257064599963549"),
            BigInteger.Parse("700659603263148726043253647098324000725292315931957621419637799747993372461352633512643757592917663041832710355100422470528397188909262164976072279278984478784712817158805505596158807905724585389892419802064494610865086337104041912542345810463584923013825961445830887942262674997055922770181868050834801755502711568967948864570394304087812144589276166143562220131736466242652216233480779931722540058370876286196191871181353130327878609314947949931327675395801509871030344623397309268916670720216769731649929974739678966992509359870770118987105461804825586142065631439724359976798430831878074648377433907881732540266946119644657912516044098757262897952401278724411065490550872427911405514547958347984791015251619049084149028683036623726572282588668549564805107156230606931813396740993700928536501891914527794973567682293777541956022836141464327567331350220338229692663522062803252540537158233345408240209594751183717799599025038112202132735423912541536853009341155687394094143914006309836761550404246816382172789542963086900388177952084358087964233816324489044464017421974837751944807300709791132477804366033839545985556671709913564955446603735207407269185815450708349433176090738616295881361286939832454699152479276043197619223108873208876978523774723503018250393374689600852699536288858533281017025880257690863328796473021140682449349309106984236166579917362459578607810362040497321211999035152257172522365314951567701574347460126627684227430422542396962782590517729287825773885664395590765196272726990756771663285296007987979441560751351278623926210702022423996483451063436830170882399827680163107866923979466976939301044596577608012621141104394468631482657109817254881357795962231429243426309471862610357083657308795382696902496579218566512071541007015121597454958488097013387021406075404611676784746227541743576440486117044792291672288544314261769522247109624136614269293587425860416979317833297940353729257843230363277970277371151383121763121885681217160479210407646265113633486772894546176746847309158704383755965935000023612496748662753313153750594764588637148195513527972913230559377075030335812036995201141182589258434332791928340053930939299921839308515791624902911793675590884798865074315014618523587221872497810349142470372583346492008610082949614978609726687683472356367034561545424261411392087801689643667069476382729924033898738100030104575536102459653668251103615421214948583385636645313139831081950846125342732097475658967139865551095257064599957089"),
            BigInteger.Parse("734044596798804732836844182428479591990384105427379733061948901361079597722744192796112313084356245671408380434016387077665957199994488705678249165693304992154495598112706698508509915275493814274485196809181375246298963640539925315484556407648352954364409195974127087997099079923926580469514008360005092839591926290528548809967845739393476548589667805398911828380067794912868111517309808403196948295152519123603770189615179379289974203699215358639518216865036485872119957570756269664103823052589958530921304969072195331893303075160250272489622522948235050033157407456578627233144641292943252097178952755133623215624751268360672985804324143009684834604462464483909405223781077139289949286726660825790795205684421692265323389212047768542169969818965185850631789467443951085387531667990070172677977314557509592285840627854688125435462613737803953097754366792627248606426412773093620546819240630059925684337421350641654728462358403530650667926420206337862470785808170050685778391391880745369549671670320738680760882826586315208197906963503458871563632963519116088918528402967548316407397020002011046767262239507090619247448594736296584246164966610353879559856746964762153827000801018254141960303285581377227622159102195885583304486701230352636659218796097384335994923137539857964526070214045250149839662683690523555783807372160789603609365835557884745434767257140427831056851951068175080678240244771190799129066816576680412054243480605511050793733418306208108101827688593249538033463994000584377041486563856661195571280294675607739323828990426102758085413046227028051297356525919542543847648757862897241509991845724970107630847454869040104121272487607503712645640738394896189941052014378473470108678423244883756629994614379972553445221649126005779471600337245980708928011725052945257405582395241240813909539877742679366987397471992875107601651106936512284427026034826409050166819088057522300094668887293052221749595110558925785462582080997940195806554212050336344312634061610805498688921221123013819783794335097786677054906222635374928234088188538090764056008721251838884477864048388300179243803655851028340250191988717222214974412944110769532706640412127234436614297884025280259747143183928471894973906366282489691750789466105614320513042820443478800425713313947516475993390020858720652927807861926760561066417766331831754392537045214853881129057121892358784793227927699876072112715908464710852772771417699038487669947347209937796188899218524383431757193644886679349687"),
            BigInteger.Parse("687326639230486313544958173289081242734699342722601646328195180884756820666394404909523173935027672206126938030086476040422927126369137127503294308740410862380254260757496483865242565803205307996632300071103006904384027446245723274484303683586277751094379574185363892855100142726884958531826508373621147285008819584525741889548411639896471359773026488493703460995140429566989652731463494474657034717185372244370756815322099305889153413933926767351786226570193548471584798909629824762321838773399492964668608918506321395981365291395745368664678465287881126129981525276475347991483001134382682511106999809306170525558730705916454500604331958114275192787803904607480837656519849971943688813001218083451875974197029177953029491667025194535632212264917289097454302874221019219869972541187659444056339150743948485733116987172784478195555154386264205390708939234071650590973433321556183601535610257458287508187359882650895028953123554422989884735643801146735874171905603546985896770506598232453360845089916787992400600529292205092988754332085182381601124405789611998431311419819586125158383908015514212653997727103185347740107683990082172437290116785938507797309179894791830535443918576909898184571787292430871938908027045167312092128942352567503084675607666628643574195222011163236333813354241107403661387528594712874207764372001608190668838319891362900124853831495363951088634180511279585621898431832514683261891761896472671564726573721271890403305286442255801323000443551707845270933723576119312076917683698380662554848472015994664986461308739198819396478329571009097397053354049045557976248028586902984826624204567668163564130406756436953610007591510927130933317917631951700067324143164666640136121969996795444877294338125738999224990755140925155534992169996143323177968113417007638412324894979649406877940295006850590866101969534349876674391117787422185143828859301455674379490294086755185563486090535913413577851687944785912579260367364365606874427008529803165296008037867731793469371407420898079248989025244783184356526951194337852505490662242658544340053079859826133958543610397999534457401142010430987050837426912453905094901937133073491353634645723723547864505225040445405855312857623575780451467172267839955441009673801755333775861026020559927252259241943264090521755333886656511274111841889127434389455559207545563761567907603649248729600396420534674418421736663239512631554764227728536139542333279647545377383687894690206150646523017480001497779465956583562551")
        };

        private byte[] buff = new byte[BYTE_LENGTH];
        private byte[] buffx2 = new byte[BYTE_LENGTH * 2];
        private Random rng  = new Random();

        public RSA() {}

        public BigInteger GetBigInteger()
        {
            rng.NextBytes(buff);
            var res = new BigInteger(buff);
            int counter = 0;
            while (res.GetBitLength() < BIT_LENGTH)
            {
                res = (res << 1) + 1;
                counter++;
            }
            return res.Sign == -1 ? res * BigInteger.MinusOne : res;
        }

        public BigInteger GetBigInteger(int length)
        {
            byte[] arr = new byte[length];
            rng.NextBytes(arr);
            int counter = 0;
            var res = new BigInteger(arr);
            while (res.GetBitLength() != BIT_LENGTH)
            {
                res = res << 1;
                res += counter % 2 == 0 ? 0 : 1;
                counter++;
            }
            return res;
        }

        public BigInteger GetPrimeBigInteger()
        {
            BigInteger i = GetBigInteger();
            i = i.IsEven ? i + BigInteger.One : i ;
            Stopwatch sw = Stopwatch.StartNew();
            Stopwatch gsw = Stopwatch.StartNew();
            UInt64 iter = 0;

            while (!IsPrime(i))
            {
                if (iter % 500 == 0)
                {
                    sw.Stop();
                    Console.WriteLine("[" + (sw.ElapsedMilliseconds / 1000).ToString() + "s] IsPrime() --> " + IsPrime(i) + " --> changing number...");
                    sw.Reset();
                    sw.Start();
                }
                i += 2;
                iter++;
            }

            gsw.Stop();
            Console.WriteLine(gsw.ElapsedMilliseconds / 1000 + "s -- total search time");

            return i;
        }

        public BigInteger GetPrimeBigInteger(int len)
        {
            BigInteger i = GetBigInteger();
            Stopwatch sw = Stopwatch.StartNew();
            Stopwatch gsw = Stopwatch.StartNew();
            UInt64 iter = 0;

            while (!IsPrime(i) || !(BigInteger.Parse(i.ToString()).GetByteCount() == len))
            {
                if (iter % 1000 == 0)
                {
                    sw.Stop();
                    Console.WriteLine("[" + (sw.ElapsedMilliseconds / 1000).ToString() + "s] IsPrime() --> " + IsPrime(i) + " --> changing number...");
                    sw.Reset();
                    sw.Start();
                }
                i = GetBigInteger(len);
                iter++;
            }

            gsw.Stop();
            Console.WriteLine(gsw.ElapsedMilliseconds / 1000 + "s -- total search time");

            return i;
        }

        public bool IsPrime(BigInteger prime) => IsProbablePrime(prime, TEST_SAMPLES);

        /// <summary>
        /// Тест Миллера-Рабина на простоту числа. Производится k раундов проверки числа n на простоту.
        /// </summary>
        public bool IsProbablePrime(BigInteger n, int k)
        {
            // если n == 2 или n == 3 - эти числа простые, возвращаем true
            if (n == 2 || n == 3)
                return true;

            // если n < 2 или n четное - возвращаем false
            if (n < 2 || n.IsEven)
                return false;

            // представим n − 1 в виде (2^s)·t, где t нечётно, это можно сделать последовательным делением n - 1 на 2
            BigInteger t = n - 1;

            int s = 0;

            while (t.IsEven)
            {
                t /= 2;
                s += 1;
            }

            // повторить k раз
            for (int i = 0; i < k; i++)
            {
                // выберем случайное целое число a в отрезке [2, n − 2]
                

                byte[] _a = new byte[n.ToByteArray().LongLength];

                BigInteger a;

                do
                {
                    rng.NextBytes(_a);
                    a = new BigInteger(_a);
                }
                while (a < 2 || a >= n - 2);

                // x ← a^t mod n, вычислим с помощью возведения в степень по модулю
                BigInteger x = BigInteger.ModPow(a, t, n);

                // если x == 1 или x == n − 1, то перейти на следующую итерацию цикла
                if (x == 1 || x == n - 1)
                    continue;

                // повторить s − 1 раз
                for (int r = 1; r < s; r++)
                {
                    // x ← x^2 mod n
                    x = BigInteger.ModPow(x, 2, n);

                    // если x == 1, то вернуть "составное"
                    if (x == 1)
                        return false;

                    // если x == n − 1, то перейти на следующую итерацию внешнего цикла
                    if (x == n - 1)
                        break;
                }

                if (x != n - 1)
                    return false;
            }

            // вернуть "вероятно простое"
            return true;
        }

        public Tuple<BigInteger, BigInteger> GetPrimePair()
        {
            var i = rng.NextInt64();
            return new Tuple<BigInteger, BigInteger>
                       (PRIMES[Convert.ToInt32(i % PRIMES.Count)],
                        PRIMES[Convert.ToInt32((i + 1) % PRIMES.Count)]);
        }

        public BigInteger GCD(BigInteger a, BigInteger b) => BigInteger.GreatestCommonDivisor(a, b);

        public BigInteger EuclidAlgorithm(BigInteger a, BigInteger b)
        {
            BigInteger q, r, x, y, x1 = 0, x2 = 1,
                                   y1 = 1, y2 = 0;

            while (b > 0)
            {
                q = a / b;
                r = a - q * b;
                x = x2 - q * x1;
                y = y2 - q * y1;
                a = b;
                b = r;
                x2 = x1;
                x1 = x;
                y2 = y1;
                y1 = y;
            }

            return x2 < y2 ? x2 : y2;
        }
    }
}
